openapi: 3.0.0

info:
  version: '1.0'
  title: 'LBAW YourOwnBuild Web API'
  description: 'Web Resources Specification (A7) for YourOwnBuild'

servers:
- url: https://lbaw23104.lbaw.fe.up.pt/
  description: Production server

externalDocs:
  description: Find more info here.
  url: https://git.fe.up.pt/lbaw/lbaw2324/lbaw23104/-/wikis/eap

tags:
  - name: 'M01: Authentication'
  - name: 'M02: Users'
  - name: 'M03: Search'
  - name: 'M04: Administration'
  - name: 'M05: Comments'
  - name: 'M06: Projects'
  - name: 'M07: Tasks'

paths:

############################################ AUTHENTICATION ############################################

######### LOGIN #########

  /login:
    get:
      operationId: R101
      summary: 'R101: Login Form'
      description: 'Provide login form. Access: PUB'
      tags:
        - 'M01: Authentication'
      responses:
        '200':
          description: 'Ok. Show log-in UI'
    post:
      operationId: R102
      summary: 'R102: Login Action'
      description: 'Processes the login form submission. Access: PUB'
      tags:
        - 'M01: Authentication'
 
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                email:          # <!--- form field name
                  type: string
                password:    # <!--- form field name
                  type: password
              required:
                - email
                - password
 
      responses:
        '302':
          description: 'Redirect after processing the login credentials.'
          headers:
            Location:
              schema:
                type: string
              examples:
                302Success:
                  description: 'Successful authentication. Redirect to user profile.'
                  value: '/users/{id}'
                302Error:
                  description: 'Failed authentication. Redirect to login form.'
                  value: '/login'
 
######### LOGOUT #########

  /logout:

    post:
      operationId: R103
      summary: 'R103: Logout Action'
      description: 'Logout the current authenticated used. Access: USR, ADM'
      tags:
        - 'M01: Authentication'
      responses:
        '302':
          description: 'Redirect after processing logout.'
          headers:
            Location:
              schema:
                type: string
              examples:
                302Success:
                  description: 'Successful logout. Redirect to login form.'
                  value: '/login'

######### REGISTER #########

  /register:
    get:
      operationId: R104
      summary: 'R104: Register Form'
      description: 'Provide new user registration form. Access: PUB'
      tags:
        - 'M01: Authentication'
      responses:
        '200':
          description: 'Ok. Show sign-up UI'

    post:
      operationId: R105
      summary: 'R105: Register Action'
      description: 'Processes the new user registration form submission. Access: PUB'
      tags:
        - 'M01: Authentication'

      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                picture:
                  type: string
                  format: binary
              required:
                - email
                - password

      responses:
        '302':
          description: 'Redirect after processing the new user information.'
          headers:
            Location:
              schema:
                type: string
              examples:
                302Success:
                  description: 'Successful authentication. Redirect to user profile.'
                  value: '/users/{id}'
                302Failure:
                  description: 'Failed authentication. Redirect to login form.'
                  value: '/login'

############################################ PROFILE ############################################

######### VIEW USER PROFILE #########

  /users/{id}:
    get:
      operationId: R201
      summary: 'R201: View user profile'
      description: 'Show the individual user profile. Access: USR'
      tags:
        - 'M02: Users'

      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true

      responses:
        '200':
          description: 'Ok. Show view profile UI'

######### EDIT USER PROFILE #########

  /users/edit:
    get:
      operationId: R202
      summary: 'R202: View user edit profile'
      description: 'Show the edit user profile. Access: OWN'
      tags:
        - 'M02: Users'

      responses:
        '200':
          description: 'Ok. Show edit profile UI'

    put:
      operationId: R203
      summary: 'R203: Update User Profile'
      description: 'Allows the owner of profile to edit their information. Access: OWN'
      tags:
        - 'M02: Users'

      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                bio:
                  type: string
                username:
                  type: string
      responses:
        '200':
          description: 'Profile updated successfully.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'User profile updated successfully.'
        '400':
          description: 'Invalid input data or format.'
        '401':
          description: 'User not authenticated or does not have permission to update this profile.'
        '404':
          description: 'User profile not found.'

######### DELETE USER PROFILE #########

  /users/delete:
    post:
      operationId: R204
      summary: 'R204: Delete User'
      description: 'Deletes the specified user. Access: OWN, ADM'
      tags:
        - 'M02: Users'
      
      requestBody:
        required: true
        content:
          application/json:
             schema:
              type: object
              properties:
                id:
                  type: integer
              required: 
                - id

      responses:
        '204':
          description: 'No Content. User profile successfully deleted.'
        '400':
          description: 'Bad Request. Invalid user ID.'
        '401':
          description: 'Unauthorized. User not authenticated or lacks permission to delete the profile.'
        '404':
          description: 'Not Found. User profile not found.'
        '500':
          description: 'Internal Server Error. Error occurred while processing the request.'

############################################ SEARCH ############################################

######### text #########





############################################ ADMINISTRATION ############################################

######### text #########





############################################ COMMENTS ############################################

######### CREATE COMMENT #########

  /comment/create:
    post:
      operationId: R501
      summary: 'R501: Create Comment'
      description: 'Creates a new comment on a specified task. Access: USR'
      tags:
        - 'M05: Comments'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id_user:
                  type: integer
                  description: 'The ID of the user creating the comment.'
                id_task:
                  type: integer
                  description: 'The ID of the task to which the comment belongs.'
                content:
                  type: string
                  description: 'The content of the comment.'
              required:
                - id_user
                - id_task
                - content
      responses:
        '201':
          description: 'Created. The comment was successfully created.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    description: 'The ID of the newly created comment.'
                  message:
                    type: string
                    description: 'A confirmation message.'
        '400':
          description: 'Bad Request. Invalid input data or format.'
        '401':
          description: 'Unauthorized. User not authenticated.'
        '404':
          description: 'Not Found. Specified task or user does not exist.'
        '500':
          description: 'Internal Server Error. Error occurred while processing the request.'

######### DELETE COMMENT #########

  /comment/delete:
    post:
      operationId: R502
      summary: 'R502: Delete Comment'
      description: 'Deletes a specified comment. Access: OWN, ADM'
      tags:
        - 'M05: Comments'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id_comment:
                  type: integer
                  description: 'The ID of the comment to be deleted.'
              required:
                - id_comment
      responses:
        '200':
          description: 'OK. Comment successfully deleted.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Comment deleted successfully.'
        '400':
          description: 'Bad Request. Invalid comment ID.'
        '401':
          description: 'Unauthorized. User not authenticated or lacks permission.'
        '404':
          description: 'Not Found. Comment not found.'
        '500':
          description: 'Internal Server Error. Error occurred while processing the request.'

######### EDIT COMMENT #########

  /comment/edit:
    put:
      operationId: R503
      summary: 'R503: Edit Comment'
      description: 'Edits an existing comment. Access: OWN'
      tags:
        - 'M05: Comments'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id_comment:
                  type: integer
                  description: 'The ID of the comment to be edited.'
                new_content:
                  type: string
                  description: 'The new content of the comment.'
              required:
                - id_comment
                - new_content
      responses:
        '200':
          description: 'OK. Comment successfully updated.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Comment updated successfully.'
        '400':
          description: 'Bad Request. Invalid input data.'
        '401':
          description: 'Unauthorized. User not authenticated or lacks permission.'
        '404':
          description: 'Not Found. Comment not found.'
        '500':
          description: 'Internal Server Error. Error occurred while processing the request.'

############################################ PROJECTS ############################################

######### CREATE PROJECT #########

  /project/create:
    post:
      operationId: R601
      summary: 'R601: Create Project'
      description: 'Creates a new project. Access: USR'
      tags:
        - 'M06: Projects'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'The name of the project.'
                description:
                  type: string
                  description: 'A brief description of the project.'
                is_public:
                  type: boolean
                  description: 'Indicates if the project is public or private.'
                id_creator:
                  type: integer
                  description: 'The ID of the user creating the project.'
              required:
                - name
                - is_public
                - id_creator
      responses:
        '201':
          description: 'Created. The project was successfully created.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    description: 'The ID of the newly created project.'
                  message:
                    type: string
                    example: 'Project created successfully.'
        '400':
          description: 'Bad Request. Invalid input data or format.'
        '401':
          description: 'Unauthorized. User not authenticated or lacks permission.'
        '500':
          description: 'Internal Server Error. Error occurred while processing the request.'

######### EDIT PROJECT #########

  /project/edit:
    put:
      operationId: R602
      summary: 'R602: Edit Project'
      description: 'Edits an existing project. Access: OWN'
      tags:
        - 'M06: Projects'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  description: 'The ID of the project to be edited.'
                name:
                  type: string
                  description: 'The new name of the project.'
                description:
                  type: string
                  description: 'The new description of the project.'
                is_public:
                  type: boolean
                  description: 'Indicates if the project is public or private.'
              required:
                - id
      responses:
        '200':
          description: 'OK. Project successfully updated.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Project updated successfully.'
        '400':
          description: 'Bad Request. Invalid input data or project ID.'
        '401':
          description: 'Unauthorized. User not authenticated or lacks permission.'
        '404':
          description: 'Not Found. Project not found.'
        '500':
          description: 'Internal Server Error. Error occurred while processing the request.'

######### DELETE PROJECT #########

  /project/delete:
    post:
      operationId: R603
      summary: 'R603: Delete Project'
      description: 'Deletes a specified project. Access: OWN, ADM'
      tags:
        - 'M06: Projects'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  description: 'The ID of the project to be deleted.'
              required:
                - id
      responses:
        '200':
          description: 'OK. Project successfully deleted.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Project deleted successfully.'
        '400':
          description: 'Bad Request. Invalid project ID.'
        '401':
          description: 'Unauthorized. User not authenticated or lacks permission.'
        '404':
          description: 'Not Found. Project not found.'
        '500':
          description: 'Internal Server Error. Error occurred while processing the request.'

############################################ TASKS ############################################

######### CREATE TASK #########

  /task/create:
    post:
      operationId: R701
      summary: 'R701: Create Task'
      description: 'Creates a new task in a project. Access: USR, ADM'
      tags:
        - 'M07: Tasks'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'The name of the task.'
                label:
                  type: string
                  description: 'A label for the task for quick identification.'
                id_project:
                  type: integer
                  description: 'The ID of the project to which the task belongs.'
                id_creator:
                  type: integer
                  description: 'The ID of the user creating the task.'
                due_date:
                  type: string
                  format: 'date'
                  description: 'The due date for the task.'
                priority:
                  type: string
                  enum: ['low', 'medium', 'high']
                  description: 'The priority of the task.'
              required:
                - name
                - label
                - id_project
                - id_creator
                - due_date
                - priority
      responses:
        '201':
          description: 'Created. The task was successfully created.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    description: 'The ID of the newly created task.'
                  message:
                    type: string
                    example: 'Task created successfully.'
        '400':
          description: 'Bad Request. Invalid input data or format.'
        '401':
          description: 'Unauthorized. User not authenticated or lacks permission.'
        '404':
          description: 'Not Found. Project not found.'
        '500':
          description: 'Internal Server Error. Error occurred while processing the request.'

######### EDIT TASK #########

  /task/edit:
    put:
      operationId: R702
      summary: 'R702: Edit Task'
      description: 'Edits an existing task in a project. Access: OWN, ADM'
      tags:
        - 'M07: Tasks'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  description: 'The ID of the task to be edited.'
                name:
                  type: string
                  description: 'The new name of the task.'
                label:
                  type: string
                  description: 'A new label for the task for quick identification.'
                due_date:
                  type: string
                  format: 'date'
                  description: 'The new due date for the task.'
                priority:
                  type: string
                  enum: ['low', 'medium', 'high']
                  description: 'The new priority of the task.'
                is_completed:
                  type: boolean
                  description: 'Indicates if the task is completed.'
              required:
                - id
      responses:
        '200':
          description: 'OK. Task successfully updated.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Task updated successfully.'
        '400':
          description: 'Bad Request. Invalid input data or task ID.'
        '401':
          description: 'Unauthorized. User not authenticated or lacks permission.'
        '404':
          description: 'Not Found. Task not found.'
        '500':
          description: 'Internal Server Error. Error occurred while processing the request.'

######### DELETE TASK #########

  /task/delete:
    post:
      operationId: R703
      summary: 'R703: Delete Task'
      description: 'Deletes a specified task from a project. Access: OWN, ADM'
      tags:
        - 'M07: Tasks'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  description: 'The ID of the task to be deleted.'
              required:
                - id
      responses:
        '200':
          description: 'OK. Task successfully deleted.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Task deleted successfully.'
        '400':
          description: 'Bad Request. Invalid task ID.'
        '401':
          description: 'Unauthorized. User not authenticated or lacks permission.'
        '404':
          description: 'Not Found. Task not found.'
        '500':
          description: 'Internal Server Error. Error occurred while processing the request.'
